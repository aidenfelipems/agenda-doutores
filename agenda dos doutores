<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>Agenda dos Doutores com Anotações - Login</title>
<style>
  * {
    box-sizing: border-box;
  }
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 10px;
    background: linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%);
    color: #34495e;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  h1 {
    font-weight: 900;
    margin-bottom: 16px;
    font-size: 2rem;
    text-align: center;
    color: #1c2833;
    text-shadow: 0 0 8px rgba(0,0,0,0.1);
    width: 100%;
    max-width: 1200px;
  }

  /* LOGIN OVERLAY CENTERED AND LARGER */
  #login-overlay {
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  }
  #login-box {
    background: #fff;
    padding: 48px 56px;
    border-radius: 20px;
    width: 380px;
    box-shadow: 0 16px 40px rgba(0,0,0,0.4);
    display: flex;
    flex-direction: column;
    align-items: center;
    color: #1b4f72;
  }
  #login-box h2 {
    margin-bottom: 32px;
    font-weight: 900;
    font-size: 2.2rem;
    color: #145a86;
    text-align: center;
  }
  #login-box label {
    align-self: flex-start;
    font-weight: 700;
    margin-bottom: 8px;
    color: #145a86;
    font-size: 1.1rem;
    user-select: none;
  }
  #login-box input {
    width: 100%;
    padding: 16px 20px;
    margin-bottom: 24px;
    font-size: 1.25rem;
    border-radius: 16px;
    border: 2px solid #2980b9;
    box-shadow: inset 0 2px 6px rgba(0,0,0,0.15);
    font-weight: 700;
    color: #1b4f72;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  #login-box input:focus {
    outline: none;
    border-color: #1b4f72;
    box-shadow: 0 0 14px #1b4f72;
    background: #d6eaf8;
  }
  #login-box button {
    width: 100%;
    background: #2980b9;
    color: white;
    border-radius: 16px;
    border: none;
    padding: 18px 0;
    font-size: 1.6rem;
    font-weight: 900;
    cursor: pointer;
    box-shadow: 0 8px 20px rgba(41, 128, 185, 0.7);
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    user-select: none;
  }
  #login-box button:hover {
    background: #1b4f72;
    box-shadow: 0 10px 28px rgba(27, 71, 114, 0.9);
  }
  #login-error {
    color: #e74c3c;
    font-weight: 700;
    margin-top: -20px;
    margin-bottom: 24px;
    font-size: 1.1rem;
    height: 1.4em;
    text-align: center;
    user-select: none;
  }

  /* MAIN CONTAINER INITIALLY HIDDEN */
  #main-container {
    display: none;
    max-width: 1200px;
    width: 100%;
    gap: 20px;
    flex-wrap: wrap;
    display: flex;
  }
  #left-panel {
    flex: 1 1 280px;
    background: #ffffffcc;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    max-height: 600px;
    overflow-y: auto;
  }
  #doctor-schedule-list {
    display: flex;
    flex-direction: column;
    gap: 22px;
  }
  .doctor-schedule-item {
    border: 1.5px solid #2980b9;
    border-radius: 12px;
    padding: 18px 28px;
    background: #e8faff;
    display: flex;
    flex-direction: column;
  }
  .doctor-name {
    font-weight: 900;
    color: #145a86;
    margin-bottom: 14px;
    font-size: 1.35rem;
    text-align: center;
  }
  .time-slot-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  .time-slot {
    background: #f5fcff;
    border: 2.5px solid #2980b9;
    border-radius: 14px;
    padding: 14px 18px;
    font-size: 1.05rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #1a3e70;
    font-weight: 700;
    cursor: pointer;
    user-select: none;
    box-shadow: inset 0 2px 5px rgba(0,0,0,0.12);
    transition: background-color 0.3s ease, border-color 0.3s ease;
    width: 100%;
    min-height: 140px;
    white-space: pre-wrap;
    overflow-wrap: break-word;
    position: relative;
  }
  .time-slot:focus {
    outline: 3px solid #1b4f72;
    background: #d6eaf8;
    border-color: #174a64;
    box-shadow: 0 0 12px #174a64;
  }
  .time-slot.editing {
    background: #cceeff;
  }
  .time-slot textarea {
    width: 100%;
    font-size: 1.05rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    border: none;
    padding: 14px 0;
    background: transparent;
    color: #174a64;
    font-weight: 700;
    resize: none;
    box-sizing: border-box;
    margin: 0;
    min-height: 100px;
  }
  .time-slot textarea:focus {
    outline: none;
  }
  #right-panel {
    flex: 2 1 600px;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  #doctor-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 14px;
    background: #ffffffcc;
    border-radius: 14px;
    padding: 24px;
    box-shadow: 0 8px 28px rgba(0,0,0,0.1);
  }
  #doctor-select {
    width: 100%;
    padding: 14px 18px;
    font-size: 1.1rem;
    border-radius: 14px;
    border: 2.5px solid #2980b9;
    box-shadow: inset 0 2px 5px rgba(0,0,0,0.15);
    background: #e8faff;
    font-weight: 700;
    color: #1a3e70;
    transition: background-color 0.3s ease, border-color 0.3s ease;
  }
  #doctor-select:focus {
    outline: none;
    border-color: #174a64;
    box-shadow: 0 0 14px #174a64;
    background: #cceeff;
  }
  #new-doctor-container {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  #new-doctor-input {
    flex-grow: 1;
    padding: 14px 18px;
    font-size: 1.1rem;
    border-radius: 14px;
    border: 2.5px solid #2980b9;
    box-shadow: inset 0 2px 5px rgba(0,0,0,0.1);
    background: #f0faff;
    color: #1a3e70;
    font-weight: 700;
    transition: border-color 0.3s ease, background-color 0.3s ease;
  }
  #new-doctor-input::placeholder {
    color: #5d6d7e;
    font-weight: 600;
  }
  #new-doctor-input:focus {
    outline: none;
    border-color: #174a64;
    box-shadow: 0 0 14px #174a64;
    background: #d0eaff;
  }
  button {
    background: #2980b9;
    color: white;
    border: none;
    border-radius: 14px;
    padding: 14px 22px;
    font-size: 1.1rem;
    font-weight: 800;
    cursor: pointer;
    user-select: none;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    flex-shrink: 0;
    box-shadow: 0 8px 22px rgba(41, 128, 185, 0.7);
  }
  button:hover:not(:disabled) {
    background: #1b4f72;
    box-shadow: 0 10px 30px rgba(27, 71, 114, 0.9);
  }
  button:disabled,
  input:disabled,
  select:disabled,
  #doctor-select[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
    box-shadow: none;
  }
  #month-selector {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    user-select: none;
  }
  #month-nav-prev,
  #month-nav-next {
    background: #2980b9;
    color: white;
    border: none;
    border-radius: 14px;
    padding: 16px 22px;
    font-size: 1.5rem;
    font-weight: 900;
    cursor: pointer;
    user-select: none;
    box-shadow: 0 6px 15px rgba(41, 128, 185, 0.6);
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
  }
  #month-nav-prev:hover:not(:disabled),
  #month-nav-next:hover:not(:disabled) {
    background: #174a64;
    box-shadow: 0 10px 30px rgba(23, 74, 100, 0.9);
  }
  #month-name {
    flex-grow: 1;
    text-align: center;
    font-weight: 900;
    font-size: 1.6rem;
    color: #145a86;
    user-select: none;
    text-shadow: 0 0 6px rgba(20, 90, 134, 0.6);
    letter-spacing: 0.05em;
  }
  #calendar {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 7px;
    width: 100%;
    user-select: none;
    background: #e5f0fa;
    padding: 16px;
    border-radius: 16px;
    box-shadow: 0 12px 28px rgba(0,0,0,0.15);
    min-height: 380px;
  }
  .day-name,
  .day {
    text-align: center;
    padding: 12px 6px;
    border-radius: 14px;
    font-weight: 900;
    user-select: none;
  }
  .day-name {
    color: #2471a3;
    text-transform: uppercase;
    font-size: 1rem;
    filter: drop-shadow(0 1px 2px rgba(36,113,163,0.85));
  }
  .day {
    background: #fefefe;
    border: 3px solid #bdd6e6;
    font-size: 1.05rem;
    cursor: pointer;
    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
    min-height: 56px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    color: #34495e;
    box-shadow: 0 3px 8px rgba(0,0,0,0.1);
  }
  .day.past.no-status {
    background: #cccccc;
    color: #888888;
    border: 3px solid #999999;
    cursor: default;
  }
  .day.past.available,
  .day.past.unavailable,
  .day.past.full,
  .day.past.feriado {
    filter: brightness(0.6);
  }
  .day:hover:not(.sunday) {
    background-color: #bbdefb;
    border-color: #2980b9;
    color: #145a86;
  }
  .day.sunday {
    color: #888888;
    cursor: default;
    background: #cccccc;
    border-color: #999999;
    box-shadow: none;
  }
  .day.available {
    background: #2ecc71;
    color: white;
    border: 3px solid #27ae60;
  }
  .day.unavailable {
    background: #e74c3c;
    color: white;
    border: 3px solid #c0392b;
  }
  .day.full {
    background: #2980b9;
    color: white;
    border: 3px solid #1b4f72;
  }
  .day.feriado {
    background: orange;
    color: white;
    border: 3px solid #cc8400;
  }
  .day.today {
    box-shadow: 0 0 8px 3px #2980b9 inset;
  }
  #legend {
    margin-top: 24px;
    width: 100%;
    display: flex;
    justify-content: space-around;
    font-size: 1rem;
    font-weight: 900;
    color: #34495e;
    text-shadow: 0 0 3px rgba(0,0,0,0.1);
    user-select: none;
  }
  .legend-item {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  .legend-color {
    width: 24px;
    height: 24px;
    border-radius: 8px;
    box-shadow: 0 0 8px rgba(0,0,0,0.05);
  }
  .available-color {
    background-color: #2ecc71;
    border: 2px solid #27ae60;
  }
  .unavailable-color {
    background-color: #e74c3c;
    border: 2px solid #c0392b;
  }
  .full-color {
    background-color: #2980b9;
    border: 2px solid #1b4f72;
  }
  .feriado-color {
    background-color: orange;
    border: 2px solid #cc8400;
  }
  #notes-panel {
    flex: 1 1 280px;
    background: #ffffffcc;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    max-height: 600px;
  }
  #notes-panel h2 {
    font-weight: 900;
    font-size: 1.4rem;
    margin-bottom: 16px;
    color: #1b4f72;
  }
  #notes-textarea {
    flex-grow: 1;
    width: 100%;
    padding: 16px;
    resize: none;
    font-size: 1.1rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    border-radius: 14px;
    border: 3px solid #2980b9;
    box-shadow: inset 0 2px 6px rgba(0,0,0,0.1);
    background: #f7fcff;
    color: #2c3e50;
    font-weight: 700;
    outline: none;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  #notes-textarea:focus {
    border-color: #174a64;
    box-shadow: 0 0 12px #174a64;
    background: #dceffd;
  }
</style>
</head>
<body>
  <div id="login-overlay" role="dialog" aria-modal="true" aria-labelledby="login-title">
    <form id="login-box" novalidate>
      <h2 id="login-title">Login</h2>
      <label for="login-username">Usuário</label>
      <input type="text" id="login-username" name="username" autocomplete="username" aria-required="true" required />
      <label for="login-password">Senha</label>
      <input type="password" id="login-password" name="password" autocomplete="current-password" aria-required="true" required />
      <div id="login-error" aria-live="assertive" role="alert"></div>
      <button type="submit" aria-label="Entrar">Entrar</button>
    </form>
  </div>

  <h1>Agenda do Doutor</h1>
  <div id="main-container" role="main" aria-hidden="true" style="display:none;">
    <section id="left-panel" aria-label="Horários de atendimento">
      <div id="doctor-schedule-list" tabindex="0" aria-live="polite" aria-relevant="additions removals"></div>
    </section>
    <section id="right-panel" aria-label="Calendário e controle de doutores">
      <div id="doctor-container" aria-label="Selecionar doutor">
        <select id="doctor-select" aria-label="Selecionar doutor" aria-live="polite" aria-atomic="true">
          <option value="" disabled selected>Selecione um doutor</option>
        </select>
        <div id="new-doctor-container">
          <input type="text" id="new-doctor-input" placeholder="Adicionar novo doutor" autocomplete="off" />
          <button id="add-doctor-button">Adicionar</button>
          <button id="clear-doctor-input-button">Limpar</button>
          <button id="remove-doctor-button">Remover</button>
        </div>
      </div>
      <div id="month-selector" aria-label="Selecionar mês">
        <button id="month-nav-prev" title="Mês anterior">&lt;</button>
        <div id="month-name" aria-live="polite" aria-atomic="true"></div>
        <button id="month-nav-next" title="Próximo mês">&gt;</button>
      </div>
      <div id="calendar" aria-label="Calendário de agendamento"></div>
      <div id="legend">
        <div class="legend-item"><div class="legend-color available-color"></div>Disponível</div>
        <div class="legend-item"><div class="legend-color unavailable-color"></div>Indisponível</div>
        <div class="legend-item"><div class="legend-color full-color"></div>Agenda cheia</div>
        <div class="legend-item"><div class="legend-color feriado-color"></div>Feriado</div>
      </div>
    </section>
    <section id="notes-panel" aria-label="Lousa de anotações">
      <h2>Anotações</h2>
      <textarea id="notes-textarea" placeholder="Digite suas anotações aqui..."></textarea>
    </section>
  </div>

<script>
(function () {
  const USERS = {
    'PABX': { password: '1234', admin: false },
    'ADM': { password: 'adm123', admin: true }
  };

  const loginOverlay = document.getElementById('login-overlay');
  const loginForm = document.getElementById('login-box');
  const loginUsername = document.getElementById('login-username');
  const loginPassword = document.getElementById('login-password');
  const loginError = document.getElementById('login-error');
  const mainContainer = document.getElementById('main-container');

  const doctorSelect = document.getElementById('doctor-select');
  const newDoctorInput = document.getElementById('new-doctor-input');
  const addDoctorButton = document.getElementById('add-doctor-button');
  const clearDoctorInputButton = document.getElementById('clear-doctor-input-button');
  const removeDoctorButton = document.getElementById('remove-doctor-button');
  const monthNameEl = document.getElementById('month-name');
  const monthNavPrev = document.getElementById('month-nav-prev');
  const monthNavNext = document.getElementById('month-nav-next');
  const calendarEl = document.getElementById('calendar');
  const doctorScheduleList = document.getElementById('doctor-schedule-list');
  const notesTextarea = document.getElementById('notes-textarea');

  const DOCTORS_KEY = 'doc-list';
  const AVAILABILITY_KEY = 'doc-cal-data';
  const NOTES_KEY = 'doctor-notes-content';

  const SLOT_GROUPS = [
    "Manhã 1 (8:00–9:00)",
    "Manhã 2 (9:00–10:00)",
    "Manhã 3 (10:00–10:30)",
    "Final da manhã 1 (11:00–11:30)",
    "Final da manhã 2 (11:30–12:30)",
    "Início da tarde 1 (13:00–13:45)",
    "Início da tarde 2 (13:45–14:30)",
    "Meio da tarde 1 (15:00–15:45)",
    "Meio da tarde 2 (15:45–16:30)",
    "Fim da tarde (17:00–18:00)"
  ];

  const stateCycle = [undefined, 'available', 'unavailable', 'full', 'feriado'];

  const dayNames = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
  const monthNames = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];

  let selectedYear, selectedMonth;
  let selectedDoctor = '';
  let currentUser = null;
  let isAdmin = false;

  function formatDate(date) {
    return date.toISOString().slice(0, 10);
  }

  function loadDoctors() {
    const list = JSON.parse(localStorage.getItem(DOCTORS_KEY) || '[]');
    return Array.isArray(list) ? list : [];
  }
  function saveDoctors(list) {
    localStorage.setItem(DOCTORS_KEY, JSON.stringify(list));
  }
  function loadAvailability(doctor) {
    const allData = JSON.parse(localStorage.getItem(AVAILABILITY_KEY) || '{}');
    return allData[doctor] || {};
  }
  function saveAvailability(doctor, availability) {
    const allData = JSON.parse(localStorage.getItem(AVAILABILITY_KEY) || '{}');
    allData[doctor] = availability;
    localStorage.setItem(AVAILABILITY_KEY, JSON.stringify(allData));
  }
  function loadDoctorNotes(doctor) {
    if (!doctor) return {};
    const key = `doc-notes-${doctor}`;
    const stored = localStorage.getItem(key);
    if (stored) {
      try {
        const parsed = JSON.parse(stored);
        if (parsed && typeof parsed === 'object') return parsed;
      } catch(e) {
        return {};
      }
    }
    return {};
  }
  function saveDoctorNotes(doctor, notesObj) {
    if (!doctor) return;
    const key = `doc-notes-${doctor}`;
    localStorage.setItem(key, JSON.stringify(notesObj));
  }
  function loadNotes() {
    return localStorage.getItem(NOTES_KEY) || '';
  }
  function saveNotes(content) {
    localStorage.setItem(NOTES_KEY, content);
  }

  function checkLogin() {
    const loggedInUser = sessionStorage.getItem('loggedInUser');
    const storedIsAdmin = sessionStorage.getItem('isAdmin') === 'true';

    if (loggedInUser && USERS[loggedInUser]) {
      currentUser = loggedInUser;
      isAdmin = storedIsAdmin;
      loginOverlay.style.display = 'none';
      mainContainer.style.display = 'flex';
      mainContainer.removeAttribute('aria-hidden');
      initApp();
    } else {
      loginOverlay.style.display = 'flex';
      mainContainer.style.display = 'none';
      mainContainer.setAttribute('aria-hidden', 'true');
      loginUsername.focus();
    }
  }

  loginForm.addEventListener('submit', e => {
    e.preventDefault();
    loginError.textContent = '';
    const username = loginUsername.value.trim().toUpperCase();
    const password = loginPassword.value;
    if (USERS[username] && USERS[username].password === password) {
      currentUser = username;
      isAdmin = USERS[username].admin;
      sessionStorage.setItem('loggedInUser', username);
      sessionStorage.setItem('isAdmin', isAdmin);
      loginOverlay.style.display = 'none';
      mainContainer.style.display = 'flex';
      mainContainer.removeAttribute('aria-hidden');
      initApp();
    } else {
      loginError.textContent = 'Usuário ou senha incorretos.';
      loginPassword.value = '';
      loginPassword.focus();
    }
  });

  function initApp() {
    const now = new Date();
    selectedYear = now.getFullYear();
    selectedMonth = now.getMonth();

    populateDoctorSelect();
    doctorSelect.disabled = false;

    addDoctorButton.disabled = !isAdmin;
    clearDoctorInputButton.disabled = !isAdmin;
    removeDoctorButton.disabled = !isAdmin;
    monthNavPrev.disabled = !isAdmin;
    monthNavNext.disabled = !isAdmin;
    notesTextarea.readOnly = !isAdmin;

    doctorSelect.addEventListener('change', () => {
      selectedDoctor = doctorSelect.value;
      reload();
    });

    addDoctorButton.addEventListener('click', () => {
      if (!isAdmin) return;
      const newName = newDoctorInput.value.trim();
      if (!newName) {
        alert('Por favor, insira um nome válido.');
        return;
      }
      if (addDoctor(newName)) {
        populateDoctorSelect();
        doctorSelect.value = newName;
        selectedDoctor = newName;
        reload();
        newDoctorInput.value = '';
      } else {
        alert('Este nome já está na lista ou não é válido.');
      }
    });

    clearDoctorInputButton.addEventListener('click', () => {
      newDoctorInput.value = '';
      newDoctorInput.focus();
    });

    removeDoctorButton.addEventListener('click', () => {
      if (!isAdmin) return;
      const nameToRemove = newDoctorInput.value.trim();
      if (!nameToRemove) {
        alert('Por favor, digite o nome do doutor a ser removido.');
        return;
      }
      if (confirm(`Tem certeza que deseja excluir o "${nameToRemove}"? Ele será removido da lista.`)) {
        if (removeDoctor(nameToRemove)) {
          populateDoctorSelect();
          if (selectedDoctor === nameToRemove) {
            selectedDoctor = '';
            doctorSelect.value = '';
          }
          alert(`Doutor "${nameToRemove}" removido da lista.`);
          newDoctorInput.value = '';
          reload();
        } else {
          alert(`Doutor "${nameToRemove}" não encontrado na lista.`);
        }
      }
    });

    monthNavPrev.addEventListener('click', () => {
      if (!isAdmin) return;
      if (selectedMonth === 0) {
        selectedMonth = 11;
        selectedYear--;
      } else {
        selectedMonth--;
      }
      reload();
    });

    monthNavNext.addEventListener('click', () => {
      if (!isAdmin) return;
      if (selectedMonth === 11) {
        selectedMonth = 0;
        selectedYear++;
      } else {
        selectedMonth++;
      }
      reload();
    });

    notesTextarea.value = loadNotes();
    notesTextarea.addEventListener('input', () => {
      if (!isAdmin) {
        notesTextarea.value = loadNotes();
        return;
      }
      saveNotes(notesTextarea.value);
    });

    reload();
  }

  function populateDoctorSelect() {
    const doctors = loadDoctors();
    doctorSelect.innerHTML = '<option value="" disabled selected>Selecione um doutor</option>';
    doctors.forEach(d => {
      const opt = document.createElement('option');
      opt.value = d;
      opt.textContent = d;
      doctorSelect.appendChild(opt);
    });
    doctorSelect.value = '';
  }

  function addDoctor(name) {
    if (!isAdmin) {
      alert('Você não tem permissão para adicionar doutores.');
      return false;
    }
    const trimmed = name.trim();
    if (!trimmed) return false;
    let doctors = loadDoctors();
    if (doctors.includes(trimmed)) return false;
    doctors.push(trimmed);
    doctors.sort((a,b) => a.localeCompare(b));
    saveDoctors(doctors);
    return true;
  }

  function removeDoctor(name) {
    if (!isAdmin) {
      alert('Você não tem permissão para remover doutores.');
      return false;
    }
    let doctors = loadDoctors();
    const idx = doctors.indexOf(name);
    if (idx === -1) return false;
    doctors.splice(idx, 1);
    saveDoctors(doctors);
    let allAvailability = JSON.parse(localStorage.getItem(AVAILABILITY_KEY) || '{}');
    if (allAvailability[name]) {
      delete allAvailability[name];
      localStorage.setItem(AVAILABILITY_KEY, JSON.stringify(allAvailability));
    }
    localStorage.removeItem(`doc-notes-${name}`);
    return true;
  }

  function generateCalendar(doctor) {
    calendarEl.innerHTML = '';
    dayNames.forEach(dn => {
      const dnEl = document.createElement('div');
      dnEl.className = 'day-name';
      dnEl.textContent = dn;
      calendarEl.appendChild(dnEl);
    });

    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const year = selectedYear;
    const month = selectedMonth;
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDay = new Date(year, month, 1);
    const firstWeekday = firstDay.getDay();

    const availability = loadAvailability(doctor);

    // fill empty slots before first day of month
    for (let i = 0; i < firstWeekday; i++) {
      const emptyEl = document.createElement('div');
      emptyEl.className = 'day';
      calendarEl.appendChild(emptyEl);
    }

    for (let day = 1; day <= daysInMonth; day++) {
      const dateObj = new Date(year, month, day);
      const dateStr = formatDate(dateObj);
      const weekday = dateObj.getDay();

      const dayEl = document.createElement('div');
      dayEl.className = 'day';
      dayEl.textContent = day;

      if (weekday === 0) {
        dayEl.classList.add('sunday');
      }

      const state = availability[dateStr];
      const isPast = dateObj < today;

      if (state === 'available') dayEl.classList.add('available');
      else if (state === 'unavailable') dayEl.classList.add('unavailable');
      else if (state === 'full') dayEl.classList.add('full');
      else if (state === 'feriado') dayEl.classList.add('feriado');

      if (isPast && !state) {
        dayEl.classList.add('past', 'no-status');
      } else if (isPast) {
        dayEl.classList.add('past');
      }

      let ariaLabelState = '';
      if(state === 'available') ariaLabelState = 'Disponível';
      else if(state === 'unavailable') ariaLabelState = 'Indisponível';
      else if(state === 'full') ariaLabelState = 'Agenda cheia';
      else if(state === 'feriado') ariaLabelState = 'Feriado';
      else if(isPast) ariaLabelState = 'Dia passado sem status';
      else ariaLabelState = 'Sem status';

      dayEl.setAttribute('aria-label', `Dia ${day}, ${ariaLabelState}`);

      if (dateStr === formatDate(today)) {
        dayEl.classList.add('today');
      }

      dayEl.tabIndex = isAdmin ? 0 : -1;
      dayEl.setAttribute('role', 'button');
      dayEl.style.cursor = isAdmin ? 'pointer' : 'default';

      if (isAdmin) {
        dayEl.addEventListener('click', () => {
          toggleDay(doctor, dateStr, dayEl);
        });
        dayEl.addEventListener('keydown', e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            toggleDay(doctor, dateStr, dayEl);
          }
        });
      } else {
        dayEl.onclick = null;
        dayEl.onkeydown = null;
      }

      calendarEl.appendChild(dayEl);
    }

    monthNameEl.textContent = `${monthNames[month]} ${year}`;
  }

  function toggleDay(doctor, dateStr, el) {
    if (!isAdmin) return;

    const availability = loadAvailability(doctor);
    const currentState = availability[dateStr];
    let idx = stateCycle.indexOf(currentState);
    idx = (idx + 1) % stateCycle.length;
    const newState = stateCycle[idx];

    ['available','unavailable','full','feriado'].forEach(cls => el.classList.remove(cls));
    el.classList.remove('past', 'no-status');

    if (newState) {
      el.classList.add(newState);
      availability[dateStr] = newState;
    } else {
      delete availability[dateStr];
      const dateObj = new Date(dateStr);
      const today = new Date();
      const todayDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      if (dateObj < todayDay) {
        el.classList.add('past', 'no-status');
      }
    }
    el.setAttribute('aria-label', `Dia ${parseInt(dateStr.slice(-2))}, ${newState ? newState.charAt(0).toUpperCase() + newState.slice(1) : "Sem status"}`);
    el.setAttribute('aria-pressed', newState === 'available' ? 'true' : 'false');
    saveAvailability(doctor, availability);
  }

  function renderDetailedSchedule() {
    doctorScheduleList.innerHTML = '';
    const doctors = loadDoctors();
    if (doctors.length === 0) {
      doctorScheduleList.innerHTML = '<p>Sem doutores cadastrados.</p>';
      return;
    }
    if (selectedDoctor && doctors.includes(selectedDoctor)) {
      const itemEl = document.createElement('div');
      itemEl.className = 'doctor-schedule-item';
      const nameEl = document.createElement('div');
      nameEl.className = 'doctor-name';
      nameEl.textContent = selectedDoctor;
      const slotsContainer = document.createElement('div');
      slotsContainer.className = 'time-slot-list';
      const doctorNotes = loadDoctorNotes(selectedDoctor);

      SLOT_GROUPS.forEach(slotLabel => {
        const slotEl = document.createElement('div');
        slotEl.className = 'time-slot';
        const noteText = doctorNotes[slotLabel] || '';
        slotEl.setAttribute('aria-label', `Bloco ${slotLabel} para o doutor ${selectedDoctor}, informação: ${noteText || 'vazio'}`);
        slotEl.textContent = noteText;
        slotEl.tabIndex = isAdmin ? 0 : -1;
        slotEl.setAttribute('role', 'textbox');
        if (isAdmin) {
          slotEl.style.cursor = 'pointer';
          slotEl.addEventListener('click', () => {
            switchToInput(slotEl, selectedDoctor, slotLabel);
          });
          slotEl.addEventListener('keydown', e => {
            if (e.key === 'Enter') {
              e.preventDefault();
              switchToInput(slotEl, selectedDoctor, slotLabel);
            }
          });
        } else {
          slotEl.style.cursor = 'default';
        }
        slotsContainer.appendChild(slotEl);
      });

      itemEl.appendChild(nameEl);
      itemEl.appendChild(slotsContainer);
      doctorScheduleList.appendChild(itemEl);
    } else {
      doctorScheduleList.innerHTML = '<p>Selecione um doutor para mostrar as observações.</p>';
    }
  }

  function switchToInput(slotEl, doctor, slotLabel) {
    if (!isAdmin) return;
    if (slotEl.classList.contains('editing')) return;
    const text = slotEl.textContent;
    slotEl.textContent = '';
    slotEl.classList.add('editing');
    const input = document.createElement('textarea');
    input.value = text;
    input.maxLength = 500;
    input.style.resize = "none";
    input.style.fontSize = "1rem";
    input.style.fontFamily = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
    input.style.width = "100%";
    input.style.height = "80px";
    input.style.border = "none";
    input.style.background = "transparent";
    input.style.color = "#1a3e70";
    input.style.fontWeight = "600";
    input.autofocus = true;
    slotEl.appendChild(input);
    input.focus();
    input.select();

    function saveAndExit() {
      const val = input.value.trim();
      const doctorNotes = loadDoctorNotes(doctor);
      if (val === '') {
        delete doctorNotes[slotLabel];
      } else {
        doctorNotes[slotLabel] = val;
      }
      saveDoctorNotes(doctor, doctorNotes);
      slotEl.removeChild(input);
      slotEl.classList.remove('editing');
      slotEl.textContent = val;
      slotEl.setAttribute('aria-label', `Bloco ${slotLabel} para o doutor ${doctor}, informação: ${val || 'vazio'}`);
    }
    input.addEventListener('blur', saveAndExit);
    input.addEventListener('keydown', e => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        saveAndExit();
      } else if (e.key === 'Escape') {
        slotEl.removeChild(input);
        slotEl.classList.remove('editing');
        slotEl.textContent = text;
      }
    });
  }

  function reload() {
    if (!selectedDoctor) {
      calendarEl.innerHTML = '<p style="grid-column: span 7; padding: 10px; text-align: center; color: #666;">Selecione um doutor para mostrar o calendário.</p>';
      monthNameEl.textContent = '';
    } else {
      generateCalendar(selectedDoctor);
    }
    renderDetailedSchedule();
    updateUIAccess();
  }

  function updateUIAccess() {
    const disabled = !isAdmin;
    doctorSelect.disabled = false;
    newDoctorInput.disabled = disabled;
    addDoctorButton.disabled = disabled;
    clearDoctorInputButton.disabled = disabled;
    removeDoctorButton.disabled = disabled;
    monthNavPrev.disabled = disabled;
    monthNavNext.disabled = disabled;
    notesTextarea.readOnly = disabled;
  }

  checkLogin();
})();
</script>
</body>
</html>

